
// Package token is generated by GoGLL. Do not edit
package token

import(
    "fmt"
)

// Token is returned by the lexer for every scanned lexical token
type Token struct {
    typ        Type
    lext, rext int
    input      []rune
}

/*
New returns a new token.
lext is the left extent and rext the right extent of the token in the input.
input is the input slice scanned by the lexer.
*/
func New(t Type, lext, rext int, input []rune) *Token {
    return &Token{
        typ:   t,
        lext:  lext,
        rext:  rext,
        input: input,
    }
}

// GetLineColumn returns the line and column of the left extent of t
func (t *Token) GetLineColumn() (line, col int) {
    line, col = 1, 1
    for j := 0; j < t.lext; j++ {
        switch t.input[j] {
        case '\n':
            line++
            col = 1
        case '\t':
            col += 4
        default:
            col++
        }
    }
    return
}

// GetInput returns the input from which t was parsed.
func (t *Token) GetInput() []rune {
    return t.input
}

// Lext returns the left extent of t
func (t *Token) Lext() int {
    return t.lext
}

// Literal returns the literal runes of t scanned by the lexer
func (t *Token) Literal() []rune {
    return t.input[t.lext:t.rext]
}

// LiteralString returns string(t.Literal())
func (t *Token) LiteralString() string {
    return string(t.Literal())
}

// LiteralStripEscape returns the literal runes of t scanned by the lexer
func (t *Token) LiteralStripEscape() []rune {
	lit := t.Literal()
	strip := make([]rune, 0, len(lit))
	for i := 0; i < len(lit); i++ {
		if lit[i] == '\\' {
			i++
			switch lit[i] {
			case 't':
				strip = append(strip, '\t')
			case 'r':
				strip = append(strip, '\r')
			case 'n':
				strip = append(strip, '\r')
			default:
				strip = append(strip, lit[i])
			}
		} else {
			strip = append(strip, lit[i])
		}
	}
	return strip
}

// LiteralStringStripEscape returns string(t.LiteralStripEscape())
func (t *Token) LiteralStringStripEscape() string {
	return string(t.LiteralStripEscape())
}

// Rext returns the right extent of t in the input
func (t *Token) Rext() int {
    return t.rext
}

func (t *Token) String() string {
    return fmt.Sprintf("%s (%d,%d) %s",
        t.TypeID(), t.lext, t.rext, t.LiteralString())
}

// Suppress returns true iff t is suppressed by the lexer
func (t *Token) Suppress() bool {
	return Suppress[t.typ]
}

// Type returns the token Type of t
func (t *Token) Type() Type {
    return t.typ
}

// TypeID returns the token Type ID of t. 
// This may be different from the literal of token t.
func (t *Token) TypeID() string {
    return t.Type().ID()
}

// Type is the token type
type Type int

func (t Type) String() string {
    return TypeToString[t]
}

// ID returns the token type ID of token Type t
func (t Type) ID() string {
    return TypeToID[t]
}


const(
    Error  Type = iota  // Error 
    EOF  // $ 
    T_0  // ! 
    T_1  // '[ 
    T_2  // ( 
    T_3  // ) 
    T_4  // - 
    T_5  // . 
    T_6  // : 
    T_7  // ; 
    T_8  // < 
    T_9  // > 
    T_10  // ASCII_Hex_Digit 
    T_11  // Bidi_Control 
    T_12  // C 
    T_13  // Cc 
    T_14  // Cf 
    T_15  // Co 
    T_16  // Cs 
    T_17  // Dash 
    T_18  // Deprecated 
    T_19  // Diacritic 
    T_20  // Digit 
    T_21  // Extender 
    T_22  // Hex_Digit 
    T_23  // Hyphen 
    T_24  // IDS_Binary_Operator 
    T_25  // IDS_Trinary_Operator 
    T_26  // Ideographic 
    T_27  // Join_Control 
    T_28  // L 
    T_29  // Letter 
    T_30  // Ll 
    T_31  // Lm 
    T_32  // Lo 
    T_33  // Logical_Order_Exception 
    T_34  // Lower 
    T_35  // Lt 
    T_36  // Lu 
    T_37  // M 
    T_38  // Mark 
    T_39  // Mc 
    T_40  // Me 
    T_41  // Mn 
    T_42  // N 
    T_43  // Nd 
    T_44  // Nl 
    T_45  // No 
    T_46  // Noncharacter_Code_Point 
    T_47  // Number 
    T_48  // Other 
    T_49  // Other_Alphabetic 
    T_50  // Other_Default_Ignorable_Code_Point 
    T_51  // Other_Grapheme_Extend 
    T_52  // Other_ID_Continue 
    T_53  // Other_ID_Start 
    T_54  // Other_Lowercase 
    T_55  // Other_Math 
    T_56  // Other_Uppercase 
    T_57  // P 
    T_58  // Pattern_Syntax 
    T_59  // Pattern_White_Space 
    T_60  // Pc 
    T_61  // Pd 
    T_62  // Pe 
    T_63  // Pf 
    T_64  // Pi 
    T_65  // Po 
    T_66  // Prepended_Concatenation_Mark 
    T_67  // Ps 
    T_68  // Punct 
    T_69  // Quotation_Mark 
    T_70  // Radical 
    T_71  // Regional_Indicator 
    T_72  // S 
    T_73  // STerm 
    T_74  // Sc 
    T_75  // Sentence_Terminal 
    T_76  // Sk 
    T_77  // Sm 
    T_78  // So 
    T_79  // Soft_Dotted 
    T_80  // Space 
    T_81  // Symbol 
    T_82  // Terminal_Punctuation 
    T_83  // Title 
    T_84  // Unified_Ideograph 
    T_85  // Upper 
    T_86  // Variation_Selector 
    T_87  // White_Space 
    T_88  // Z 
    T_89  // Zl 
    T_90  // Zp 
    T_91  // Zs 
    T_92  // [ 
    T_93  // \\p{ 
    T_94  // ] 
    T_95  // ]' 
    T_96  // any 
    T_97  // char_lit 
    T_98  // empty 
    T_99  // hex_digit 
    T_100  // letter 
    T_101  // lowcase 
    T_102  // not 
    T_103  // nt 
    T_104  // number 
    T_105  // package 
    T_106  // string_lit 
    T_107  // tokid 
    T_108  // upcase 
    T_109  // { 
    T_110  // | 
    T_111  // } 
)

var TypeToString = []string{ 
    "Error",
    "EOF",
    "T_0",
    "T_1",
    "T_2",
    "T_3",
    "T_4",
    "T_5",
    "T_6",
    "T_7",
    "T_8",
    "T_9",
    "T_10",
    "T_11",
    "T_12",
    "T_13",
    "T_14",
    "T_15",
    "T_16",
    "T_17",
    "T_18",
    "T_19",
    "T_20",
    "T_21",
    "T_22",
    "T_23",
    "T_24",
    "T_25",
    "T_26",
    "T_27",
    "T_28",
    "T_29",
    "T_30",
    "T_31",
    "T_32",
    "T_33",
    "T_34",
    "T_35",
    "T_36",
    "T_37",
    "T_38",
    "T_39",
    "T_40",
    "T_41",
    "T_42",
    "T_43",
    "T_44",
    "T_45",
    "T_46",
    "T_47",
    "T_48",
    "T_49",
    "T_50",
    "T_51",
    "T_52",
    "T_53",
    "T_54",
    "T_55",
    "T_56",
    "T_57",
    "T_58",
    "T_59",
    "T_60",
    "T_61",
    "T_62",
    "T_63",
    "T_64",
    "T_65",
    "T_66",
    "T_67",
    "T_68",
    "T_69",
    "T_70",
    "T_71",
    "T_72",
    "T_73",
    "T_74",
    "T_75",
    "T_76",
    "T_77",
    "T_78",
    "T_79",
    "T_80",
    "T_81",
    "T_82",
    "T_83",
    "T_84",
    "T_85",
    "T_86",
    "T_87",
    "T_88",
    "T_89",
    "T_90",
    "T_91",
    "T_92",
    "T_93",
    "T_94",
    "T_95",
    "T_96",
    "T_97",
    "T_98",
    "T_99",
    "T_100",
    "T_101",
    "T_102",
    "T_103",
    "T_104",
    "T_105",
    "T_106",
    "T_107",
    "T_108",
    "T_109",
    "T_110",
    "T_111",
}

var StringToType = map[string] Type { 
    "Error" : Error, 
    "EOF" : EOF, 
    "T_0" : T_0, 
    "T_1" : T_1, 
    "T_2" : T_2, 
    "T_3" : T_3, 
    "T_4" : T_4, 
    "T_5" : T_5, 
    "T_6" : T_6, 
    "T_7" : T_7, 
    "T_8" : T_8, 
    "T_9" : T_9, 
    "T_10" : T_10, 
    "T_11" : T_11, 
    "T_12" : T_12, 
    "T_13" : T_13, 
    "T_14" : T_14, 
    "T_15" : T_15, 
    "T_16" : T_16, 
    "T_17" : T_17, 
    "T_18" : T_18, 
    "T_19" : T_19, 
    "T_20" : T_20, 
    "T_21" : T_21, 
    "T_22" : T_22, 
    "T_23" : T_23, 
    "T_24" : T_24, 
    "T_25" : T_25, 
    "T_26" : T_26, 
    "T_27" : T_27, 
    "T_28" : T_28, 
    "T_29" : T_29, 
    "T_30" : T_30, 
    "T_31" : T_31, 
    "T_32" : T_32, 
    "T_33" : T_33, 
    "T_34" : T_34, 
    "T_35" : T_35, 
    "T_36" : T_36, 
    "T_37" : T_37, 
    "T_38" : T_38, 
    "T_39" : T_39, 
    "T_40" : T_40, 
    "T_41" : T_41, 
    "T_42" : T_42, 
    "T_43" : T_43, 
    "T_44" : T_44, 
    "T_45" : T_45, 
    "T_46" : T_46, 
    "T_47" : T_47, 
    "T_48" : T_48, 
    "T_49" : T_49, 
    "T_50" : T_50, 
    "T_51" : T_51, 
    "T_52" : T_52, 
    "T_53" : T_53, 
    "T_54" : T_54, 
    "T_55" : T_55, 
    "T_56" : T_56, 
    "T_57" : T_57, 
    "T_58" : T_58, 
    "T_59" : T_59, 
    "T_60" : T_60, 
    "T_61" : T_61, 
    "T_62" : T_62, 
    "T_63" : T_63, 
    "T_64" : T_64, 
    "T_65" : T_65, 
    "T_66" : T_66, 
    "T_67" : T_67, 
    "T_68" : T_68, 
    "T_69" : T_69, 
    "T_70" : T_70, 
    "T_71" : T_71, 
    "T_72" : T_72, 
    "T_73" : T_73, 
    "T_74" : T_74, 
    "T_75" : T_75, 
    "T_76" : T_76, 
    "T_77" : T_77, 
    "T_78" : T_78, 
    "T_79" : T_79, 
    "T_80" : T_80, 
    "T_81" : T_81, 
    "T_82" : T_82, 
    "T_83" : T_83, 
    "T_84" : T_84, 
    "T_85" : T_85, 
    "T_86" : T_86, 
    "T_87" : T_87, 
    "T_88" : T_88, 
    "T_89" : T_89, 
    "T_90" : T_90, 
    "T_91" : T_91, 
    "T_92" : T_92, 
    "T_93" : T_93, 
    "T_94" : T_94, 
    "T_95" : T_95, 
    "T_96" : T_96, 
    "T_97" : T_97, 
    "T_98" : T_98, 
    "T_99" : T_99, 
    "T_100" : T_100, 
    "T_101" : T_101, 
    "T_102" : T_102, 
    "T_103" : T_103, 
    "T_104" : T_104, 
    "T_105" : T_105, 
    "T_106" : T_106, 
    "T_107" : T_107, 
    "T_108" : T_108, 
    "T_109" : T_109, 
    "T_110" : T_110, 
    "T_111" : T_111, 
}

var TypeToID = []string { 
    "Error", 
    "$", 
    "!", 
    "'[", 
    "(", 
    ")", 
    "-", 
    ".", 
    ":", 
    ";", 
    "<", 
    ">", 
    "ASCII_Hex_Digit", 
    "Bidi_Control", 
    "C", 
    "Cc", 
    "Cf", 
    "Co", 
    "Cs", 
    "Dash", 
    "Deprecated", 
    "Diacritic", 
    "Digit", 
    "Extender", 
    "Hex_Digit", 
    "Hyphen", 
    "IDS_Binary_Operator", 
    "IDS_Trinary_Operator", 
    "Ideographic", 
    "Join_Control", 
    "L", 
    "Letter", 
    "Ll", 
    "Lm", 
    "Lo", 
    "Logical_Order_Exception", 
    "Lower", 
    "Lt", 
    "Lu", 
    "M", 
    "Mark", 
    "Mc", 
    "Me", 
    "Mn", 
    "N", 
    "Nd", 
    "Nl", 
    "No", 
    "Noncharacter_Code_Point", 
    "Number", 
    "Other", 
    "Other_Alphabetic", 
    "Other_Default_Ignorable_Code_Point", 
    "Other_Grapheme_Extend", 
    "Other_ID_Continue", 
    "Other_ID_Start", 
    "Other_Lowercase", 
    "Other_Math", 
    "Other_Uppercase", 
    "P", 
    "Pattern_Syntax", 
    "Pattern_White_Space", 
    "Pc", 
    "Pd", 
    "Pe", 
    "Pf", 
    "Pi", 
    "Po", 
    "Prepended_Concatenation_Mark", 
    "Ps", 
    "Punct", 
    "Quotation_Mark", 
    "Radical", 
    "Regional_Indicator", 
    "S", 
    "STerm", 
    "Sc", 
    "Sentence_Terminal", 
    "Sk", 
    "Sm", 
    "So", 
    "Soft_Dotted", 
    "Space", 
    "Symbol", 
    "Terminal_Punctuation", 
    "Title", 
    "Unified_Ideograph", 
    "Upper", 
    "Variation_Selector", 
    "White_Space", 
    "Z", 
    "Zl", 
    "Zp", 
    "Zs", 
    "[", 
    "\\p{", 
    "]", 
    "]'", 
    "any", 
    "char_lit", 
    "empty", 
    "hex_digit", 
    "letter", 
    "lowcase", 
    "not", 
    "nt", 
    "number", 
    "package", 
    "string_lit", 
    "tokid", 
    "upcase", 
    "{", 
    "|", 
    "}", 
}

var IDToType = map[string]Type { 
    "Error": 0, 
    "$": 1, 
    "!": 2, 
    "'[": 3, 
    "(": 4, 
    ")": 5, 
    "-": 6, 
    ".": 7, 
    ":": 8, 
    ";": 9, 
    "<": 10, 
    ">": 11, 
    "ASCII_Hex_Digit": 12, 
    "Bidi_Control": 13, 
    "C": 14, 
    "Cc": 15, 
    "Cf": 16, 
    "Co": 17, 
    "Cs": 18, 
    "Dash": 19, 
    "Deprecated": 20, 
    "Diacritic": 21, 
    "Digit": 22, 
    "Extender": 23, 
    "Hex_Digit": 24, 
    "Hyphen": 25, 
    "IDS_Binary_Operator": 26, 
    "IDS_Trinary_Operator": 27, 
    "Ideographic": 28, 
    "Join_Control": 29, 
    "L": 30, 
    "Letter": 31, 
    "Ll": 32, 
    "Lm": 33, 
    "Lo": 34, 
    "Logical_Order_Exception": 35, 
    "Lower": 36, 
    "Lt": 37, 
    "Lu": 38, 
    "M": 39, 
    "Mark": 40, 
    "Mc": 41, 
    "Me": 42, 
    "Mn": 43, 
    "N": 44, 
    "Nd": 45, 
    "Nl": 46, 
    "No": 47, 
    "Noncharacter_Code_Point": 48, 
    "Number": 49, 
    "Other": 50, 
    "Other_Alphabetic": 51, 
    "Other_Default_Ignorable_Code_Point": 52, 
    "Other_Grapheme_Extend": 53, 
    "Other_ID_Continue": 54, 
    "Other_ID_Start": 55, 
    "Other_Lowercase": 56, 
    "Other_Math": 57, 
    "Other_Uppercase": 58, 
    "P": 59, 
    "Pattern_Syntax": 60, 
    "Pattern_White_Space": 61, 
    "Pc": 62, 
    "Pd": 63, 
    "Pe": 64, 
    "Pf": 65, 
    "Pi": 66, 
    "Po": 67, 
    "Prepended_Concatenation_Mark": 68, 
    "Ps": 69, 
    "Punct": 70, 
    "Quotation_Mark": 71, 
    "Radical": 72, 
    "Regional_Indicator": 73, 
    "S": 74, 
    "STerm": 75, 
    "Sc": 76, 
    "Sentence_Terminal": 77, 
    "Sk": 78, 
    "Sm": 79, 
    "So": 80, 
    "Soft_Dotted": 81, 
    "Space": 82, 
    "Symbol": 83, 
    "Terminal_Punctuation": 84, 
    "Title": 85, 
    "Unified_Ideograph": 86, 
    "Upper": 87, 
    "Variation_Selector": 88, 
    "White_Space": 89, 
    "Z": 90, 
    "Zl": 91, 
    "Zp": 92, 
    "Zs": 93, 
    "[": 94, 
    "\\p{": 95, 
    "]": 96, 
    "]'": 97, 
    "any": 98, 
    "char_lit": 99, 
    "empty": 100, 
    "hex_digit": 101, 
    "letter": 102, 
    "lowcase": 103, 
    "not": 104, 
    "nt": 105, 
    "number": 106, 
    "package": 107, 
    "string_lit": 108, 
    "tokid": 109, 
    "upcase": 110, 
    "{": 111, 
    "|": 112, 
    "}": 113, 
}

var Suppress = []bool { 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
    false, 
}

