
// Package symbols is generated by gogll. Do not edit.
package symbols

type Symbol interface{
	isSymbol()
	IsNonTerminal() bool
	String() string
}

func (NT) isSymbol() {}
func (T) isSymbol() {}

// NT is the type of non-terminals symbols
type NT int
const( 
	NT_Array NT = iota
	NT_GoGLL 
	NT_Member 
	NT_Members 
	NT_Object 
	NT_Value 
	NT_Values 
)

// T is the type of terminals symbols
type T int
const( 
	T_0 T = iota // , 
	T_1  // : 
	T_2  // [ 
	T_3  // ] 
	T_4  // false 
	T_5  // null 
	T_6  // numeric 
	T_7  // string 
	T_8  // true 
	T_9  // { 
	T_10  // } 
)

type Symbols []Symbol

func (ss Symbols) Strings() []string {
	strs := make([]string, len(ss))
	for i, s := range ss {
		strs[i] = s.String()
	}
	return strs
}

func (NT) IsNonTerminal() bool {
	return true
}

func (T) IsNonTerminal() bool {
	return false
}

func (nt NT) String() string {
	return ntToString[nt]
}

func (t T) String() string {
	return tToString[t]
}

var ntToString = []string { 
	"Array", /* NT_Array */
	"GoGLL", /* NT_GoGLL */
	"Member", /* NT_Member */
	"Members", /* NT_Members */
	"Object", /* NT_Object */
	"Value", /* NT_Value */
	"Values", /* NT_Values */ 
}

var tToString = []string { 
	",", /* T_0 */
	":", /* T_1 */
	"[", /* T_2 */
	"]", /* T_3 */
	"false", /* T_4 */
	"null", /* T_5 */
	"numeric", /* T_6 */
	"string", /* T_7 */
	"true", /* T_8 */
	"{", /* T_9 */
	"}", /* T_10 */ 
}

var stringNT = map[string]NT{ 
	"Array":NT_Array,
	"GoGLL":NT_GoGLL,
	"Member":NT_Member,
	"Members":NT_Members,
	"Object":NT_Object,
	"Value":NT_Value,
	"Values":NT_Values,
}
